Welcome to Gutenprint 5.2.0-beta2 (5.1.98.2)!  Please read these
release notes carefully.

Gutenprint is a suite of printer drivers that may be used with most
common UNIX print spooling systems, including CUPS, lpr, LPRng, or
others.  These drivers provide high quality printing for UNIX, Linux,
and Macintosh OS X (10.2 and above) systems.  Gutenprint includes CUPS
and Foomatic drivers, and an enhanced Print plug-in for GIMP that
replaces the print plug-in packaged with the GIMP distribution.

Gutenprint currently supports almost 900 printer models.

Gutenprint 5.2.0-beta1 is the first beta release of Gutenprint 5.2.

*** NOTE TO PACKAGERS: This is a beta release of the forthcoming 5.2
    stable release.  As of 5.2 and until further notice, Gutenprint
    will no longer deliver separate "development" and "stable" release
    series.

These release notes contain the following sections:

I)    General Requirements
II)   Changes from Previous Releases
	* Changes from Gutenprint 5.2.0-beta1
        * General changes from Gutenprint 5.0
	* Changes from Gutenprint 5.0.2 and 5.1.7
	* Changes from Gutenprint 5.0.2 only
	* Changes from Gutenprint 5.1.7 only
III)   Exceptions and Workarounds
	A) General Issues
	B) Build/Installation Issues


================================================================

I) GENERAL REQUIREMENTS

Gutenprint will run on any reasonably modern computer running Linux,
Macintosh OS X (10.2 or above), Solaris, or any other UNIX-like
operating system.  If you plan to compile this package from source,
you will also need an ANSI C compiler, such as gcc (recommended).  A
compiler is not required if you are installing a pre-compiled package.

Processor and memory requirements vary depending upon the printer and
runtime options selected; it is suggested that you have at least 64 MB
of memory for general purpose printing, 256 MB or more for high
quality printing on a good printer, and 1 GB or more for large format
printing at high resolution.  You should have at least 50 MB of free
disk space to compile and install Gutenprint.  Disk space requirements
for printing will vary depending upon how you use Gutenprint, but are
generally modest except as noted below.  We recommend a processor
speed of at least 300 MHz.  Fast printers may require a faster
processor to achieve maximum printing speed.

For general use, you should have the Common UNIX Printing System, CUPS
(version 1.1.15 or above) or Foomatic (2.0 or above) installed.
Please the rest of the release notes, in particular the Exceptions and
Workarounds, for full details on installation, as there is important
information to be aware of.  CUPS is the printing system used on
Macintosh OS X 10.2 and above, and many other systems use it.  The
combination of CUPS and Gutenprint provides a flexible, general
purpose printing system capable of producing the highest quality
output with any of the printers supported by this package.  We
strongly recommend using CUPS with Gutenprint as a general-purpose
printing solution.

The enhanced Print plug-in for GIMP requires GIMP 2.0 or above (GIMP
2.2 recommended).  This plug-in will work with any printing system,
and offers a comprehensive user interface to control all aspects of
the printing process.  If you are printing photographs in large format
from GIMP at very high resolution, disk space requirements may be
substantial, and we recommend at least 2 GB of free disk space for
that purpose.

The Ghostscript driver requires GNU Ghostscript 6.53 or higher, ESP
Ghostscript 7.05 or higher, or AFPL Ghostscript 7.04 or higher.  It
uses the IJS package included with these versions of Ghostscript to
create a driver that may be built much more easily than traditional
Ghostscript drivers.  This driver should be used in conjunction with
Foomatic to configure printers.

Users of Macintosh OS X 10.2 (Jaguar), 10.3 (Panther), 10.4 (Tiger),
and 10.5 (Leopard) can use this package, as the printing system is
based on CUPS.  For ease of installation, a pre-built package with
installer is normally supplied a few days after the release of the
source package.  We strongly recommend that OS X users use the
pre-built package rather than attempt to build it themselves.

NOTE: This package will not work with any version of OS X 10.0 and
10.1 (such as 10.1.5).  The printing system used with these versions
of OS X is not compatible with Gutenprint.  OS X 10.2 and above use
CUPS as the basis of the printing system, which is compatible with
Gutenprint.

The README file included with this package provides full instructions
for building and installing Gutenprint.


================================================================

II) MAJOR CHANGES FROM PREVIOUS RELEASES

* CHANGES FROM GUTENPRINT 5.2.0-BETA1:

   This release fixes a fatal bug that causes Gutenprint 5.2.0-beta1
   to not initialize correctly.

----------------

* GENERAL CHANGES FROM GUTENPRINT 5.0:

   1) Gutenprint 5.2 and beyond no longer support GIMP 1.2.  Please
      ensure that you are using GIMP 2.0 or above.

   2) The PostScript driver has been rewritten, offering enhanced
      functionality approaching that of the native printer drivers.
      This driver is used by the enhanced Print plugin for the GIMP,
      and by other packages (such as PhotoPrint) that utilize
      Gutenprint.  In particular, the following specific functionality
      has been added:

      - All PPD file options are now offered.

      - CMYK input is now handled correctly.

      - The PostScript driver recognizes Gutenprint PPD files (from
        the native CUPS driver, not from Foomatic) and presents
        floating point options correctly.

	Note that this driver does not offer the curve options offered
	by the native drivers.

----------------

* CHANGES FROM GUTENPRINT 5.0.2 AND 5.1.7:

   1) cups-genppdupdate is no longer versioned, as it was in 5.0 and
      5.1 (cups-genppdupdate.5.0 and cups-genppdupdate.5.1).  It also
      supports the following options:

      -r Specify the major.minor version to update to, e. g. 5.0 or
         5.1.

      -f Bypass ownership/permissions checks on update PPD files.

      -i Interactively ask whether to update each PPD file.

   2) The performance of cups-genppdupdate has been improved
      significantly.

   3) cups-genppdupdate no longer updates PPD files that differ only
      in case of the file extension (e. g. printer.ppd and
      printer.PPD).  This avoids updating PPD files twice on
      filesystems that are case insensitive, such as OS X.

   4) cups-genppdconfig has been removed from this release.  This
      command was used to configure CUPS printer queues, but is not
      necessary as there are ample other tools available to configure
      printer queues.

   5) Support for generic large format PCL laser printers has been
      added.

   6) Many translations have been updated.

   7) The Canon iPixma 4500 has been fixed.

   8) L-size photo paper (3 1/2x5 inches) has been added.

----------------

* CHANGES FROM GUTENPRINT 5.0.2 ONLY:

   1) New printers supported in this release:

      * Epson inkjet printers:

	EPSON PictureMate 100
	EPSON PictureMate 210 (Corrected)
	EPSON PictureMate 240 (Corrected)
	EPSON PictureMate 250 (Corrected)
	EPSON PictureMate 260
	EPSON PictureMate 270
	EPSON PictureMate 280 (Corrected)
	EPSON PictureMate 290
	EPSON PictureMate 500
	EPSON PictureMate 2005
	EPSON PictureMate Dash
	EPSON PictureMate Flash (Corrected)
	EPSON PictureMate Pal (Corrected)
	EPSON PictureMate Snap (Corrected)
	EPSON E 150 (Corrected)
	EPSON E 300
	EPSON E 520
	EPSON E 500
	EPSON E 720
	EPSON E 700
	EPSON Stylus D92
	EPSON Stylus DX4400
	EPSON Stylus DX4450
	EPSON Stylus DX7000F
	EPSON Stylus DX7400
	EPSON Stylus DX7450
	EPSON Stylus DX8400
	EPSON Stylus DX8450
	EPSON Stylus Photo R280
	EPSON Stylus Photo R285
	EPSON Stylus Photo RX585
	EPSON Stylus Photo RX680
	EPSON Stylus Photo RX685

	(Note that a number of the PictureMate printers that were
	previously included generated grossly incorrect output.  Not
	all of the PictureMate printers have been fully tuned at this
	point.)

      * Canon inkjet printers:
        Canon PIXMA MP520 (#1872394)
	Canon PIXMA iP6000D

   2) Printing for the Canon PIXMA iP4500 has been fixed (#1834153).

   3) Printing near the bottom of the page has been improved for many
      modern Epson inkjet printers.  In addition, we have determined
      that most of these printers can print with consistent high
      quality at 2880x2880 and 5760x2880 DPI.  Therefore, these
      resolutions will be used for Ultra Photo and Best qualities
      respectively on these printers.

      Printers affected include:

      * Stylus Photo R800, R1800, PM-G820

      * Stylus Photo R2400

      * All printers using Claria ink

   4) Full bleed printing now works properly on the Epson Stylus Photo
      R2400.

   5) The Epson Stylus C120 now allows printing at 2880x2880 and
      5760x2880.  However, print quality near the bottom of the page
      may be poor, and these settings are therefore not used for Ultra
      Photo and Best quality.

   6) The ink drop sizes on the Epson Stylus Photo printers using
      Claria ink have been retuned, yielding improved quality at lower
      resolutions.

   7) A problem with determining the system printer queues in the GIMP
      plugin on certain systems using languages other than English has
      been fixed.

   8) Envelope paper sizes are now offered in both portrait and
      landscape form factor, as some printers expect envelopes to be
      fed long edge first while some expect them to be fed short edge
      first.

   9) PCL laser printers now offer paper trays with adjustable guides.
      Many laser printers use adjustable guides for manual feed of
      papers narrower than letter size.

   10) The GIMP plugin now offers reset buttons for individual
      settings, so it is possible to reset a single setting to its
      default without resetting all settings.

   11) A new dither algorithm, Ordered New, has been added.  This
      dither algorithm is most likely to improve output at low
      resolutions, particularly when printing black and white.  It
      will only help on printers offering multiple drop sizes.

   12) Various new controls and settings have been added to assist in
      printer calibration.  While the tools for using these controls
      are not yet created, these tools will assist in calibrating
      printers in the future.

      * The Epson driver now offers additional controls for adjusting
      	the relationship between light and dark ink:

	+ The Value parameters (such as Light Cyan Value) specify the
	  relative darkness of the light vs. dark inks.

	+ The Cutoff parameters now specify the point at which the
	  darker ink is first used, relative to the value of the light
	  ink.

	+ The Scale parameters now specify the amount of light ink
	  used (essentially the density of the light ink).  This is
	  the same as the parameters previously called Cutoff.

      * The Epson driver now exposes as defaults the actual GCR
        settings used for the printer, paper, and ink combination in
        use.

      * The Epson driver now allows passing low level settings such as
        printer base resolution, ink drop size selection, and relative
        ink drop size as parameters.  The ink drop size can be
        accessed in the GIMP plugin, while the base resolution and ink
        drop size selection can only be used via the test pattern
        generator or other application that allows setting integer
        parameters.

      * Two new dither algorithms, Segmented and Segmented New, have
	been added.  These are not intended for normal use, and will
	normally behave like Ordered and Ordered New.  However, if Raw
	color correction is selected and a printer with multiple drop
	sizes is used, the range of input will be divided up such that
	the high order bits will select the drop size to be used and
	the lower bits will specify the amount of ink.  High order
	bits of 0 indicate that all drop sizes should be used.

	For example, if a printer offers 3 drop sizes (2 bits), the
	range of 0-16383 will print all drop sizes normally (with the
	range of 0-16383 being scaled to 0-65535), 16384-32767 will
	use the small drop size, and so forth.

	This is intended to assist in tuning ink drop sizes and is not
	normally useful otherwise.

      * A new parameter allowing dumping out of color correction state
	(lookup tables, GCR data, curves, etc.) has been added, and is
	accessible in the GIMP plugin.  At present, this data cannot
	be used directly, but it is intended that in the future this
	mechanism be used to allow calibration information to be saved
	and restored.


----------------

* CHANGES FROM GUTENPRINT 5.1.7 ONLY:

   1) The following HP inkjet printers are now supported.  Support for
      these printers was dropped in 5.1.4, but is now restored as some
      users have no alternative options.  We recommend that where
      possible users switch to the HPIJS driver package (the printer
      part of HPLIP), available from http://hplip.sourceforge.net.
      The HPIJS package is licensed under the GPL and BSD licenses.

	HP Business Inkjet 2200
	HP Business Inkjet 2230
	HP Business Inkjet 2250
	HP Business Inkjet 2250TN
	HP Business Inkjet 2280
	HP Color Inkjet Printer CP1160
	HP Color Inkjet Printer CP1700
	HP Color LaserJet 2500
	HP Color LaserJet 4500
	HP Color LaserJet 4550
	HP Color LaserJet 4600
	HP Color LaserJet 5
	HP Color LaserJet 5000
	HP Color LaserJet 5500
	HP Color LaserJet 8550GN
	HP DeskJet 400
	HP DeskJet 420C
	HP DeskJet 450
	HP DeskJet 500
	HP DeskJet 500C
	HP DeskJet 505J Plus
	HP DeskJet 510
	HP DeskJet 520
	HP DeskJet 540C
	HP DeskJet 550C
	HP DeskJet 5550
	HP DeskJet 5551
	HP DeskJet 560C
	HP DeskJet 600
	HP DeskJet 600C
	HP DeskJet 610C
	HP DeskJet 610CL
	HP DeskJet 6122
	HP DeskJet 6127
	HP DeskJet 612C
	HP DeskJet 640C
	HP DeskJet 648C
	HP DeskJet 660C
	HP DeskJet 670C
	HP DeskJet 670TV
	HP DeskJet 672C
	HP DeskJet 680C
	HP DeskJet 682C
	HP DeskJet 690C
	HP DeskJet 692C
	HP DeskJet 693C
	HP DeskJet 694C
	HP DeskJet 695C
	HP DeskJet 697C
	HP DeskJet 810C
	HP DeskJet 812C
	HP DeskJet 815C
	HP DeskJet 816C
	HP DeskJet 825C
	HP DeskJet 830C
	HP DeskJet 832C
	HP DeskJet 840C
	HP DeskJet 841C
	HP DeskJet 842C
	HP DeskJet 843C
	HP DeskJet 845C
	HP DeskJet 850C
	HP DeskJet 855C
	HP DeskJet 870C
	HP DeskJet 880C
	HP DeskJet 882C
	HP DeskJet 890C
	HP DeskJet 895C
	HP DeskJet 916C
	HP DeskJet 920C
	HP DeskJet 9300
	HP DeskJet 930C
	HP DeskJet 932C
	HP DeskJet 933C
	HP DeskJet 934C
	HP DeskJet 935C
	HP DeskJet 940C
	HP DeskJet 948C
	HP DeskJet 950C
	HP DeskJet 952C
	HP DeskJet 955C
	HP DeskJet 957C
	HP DeskJet 959C
	HP DeskJet 960C
	HP DeskJet 970C
	HP DeskJet 975C
	HP DeskJet 980C
	HP DeskJet 990C
	HP DeskJet 995C
	HP DeskJet 1100C
	HP DeskJet 1120C
	HP DeskJet 1125C
	HP DeskJet 1200C
	HP DeskJet 1220C
	HP DeskJet 1600C
	HP DeskJet 1600CM
	HP DeskJet 2000
	HP DeskJet 2500
	HP DeskJet 2500CM
	HP DeskJet 340C
	HP DeskJet 3810
	HP DeskJet 3816
	HP DeskJet 3820
	HP DeskJet 3822
	HP OfficeJet 300
	HP OfficeJet 330
	HP OfficeJet 350
	HP OfficeJet 500
	HP OfficeJet 520
	HP OfficeJet 570
	HP OfficeJet 580
	HP OfficeJet 590
	HP OfficeJet 600
	HP OfficeJet 610
	HP OfficeJet 625
	HP OfficeJet 630
	HP OfficeJet 635
	HP OfficeJet 700
	HP OfficeJet 710
	HP OfficeJet 720
	HP OfficeJet 725
	HP OfficeJet 5105
	HP OfficeJet 5110
	HP OfficeJet 5110xi
	HP OfficeJet 6105
	HP OfficeJet 6110
	HP OfficeJet 7110
	HP OfficeJet 7130
	HP OfficeJet 7140
	HP OfficeJet D125
	HP OfficeJet D135
	HP OfficeJet D145
	HP OfficeJet D155
	HP OfficeJet G55
	HP OfficeJet G85
	HP OfficeJet G95
	HP OfficeJet K60
	HP OfficeJet K60xi
	HP OfficeJet K80
	HP OfficeJet K80xi
	HP OfficeJet LX
	HP OfficeJet Pro 1150C
	HP OfficeJet Pro 1170C
	HP OfficeJet Pro 1175C
	HP OfficeJet R40
	HP OfficeJet R45
	HP OfficeJet R60
	HP OfficeJet R65
	HP OfficeJet R80
	HP OfficeJet T45
	HP OfficeJet T65
	HP OfficeJet V40
	HP OfficeJet V40xi
	HP OfficeJet
	HP PSC 370
	HP PSC 380
	HP PSC 500
	HP PSC 750
	HP PSC 950
	HP PSC 950xi
	HP PSC 2110
	HP PSC 2150
	HP PSC 2210
	HP PhotoSmart 7150
	HP PhotoSmart 7345
	HP PhotoSmart 7350
	HP PhotoSmart 7550
	HP PhotoSmart P100
	HP PhotoSmart P130
	HP PhotoSmart P230
	HP PhotoSmart P1000
	HP PhotoSmart P1100
	HP PhotoSmart P1115
	HP PhotoSmart P1215
	HP PhotoSmart P1218
	HP PhotoSmart P1315
	HP e-printer e20


================================================================

III) EXCEPTIONS AND WORKAROUNDS

A) GENERAL ISSUES

  1) The Canon, Hewlett-Packard, Lexmark, and dye sublimation drivers
     do not offer all of the additional options and improvements that
     the Epson driver does.  Please contact us if you would like to
     assist with this.


----------------

B) BUILD/INSTALLATION ISSUES

  1) With certain versions of CUPS and in certain non-default
     configurations, if a new version of Gutenprint is installed over
     an existing version genppd will create PPD files based on the
     older version of Gutenprint rather than the newer version.  This
     will happen if all of the following are true:

     i) The cups-config provided by the CUPS driver adds
        -Wl,rpath=/usr/lib. This is done by some versions of CUPS
        reportedly because in some cases the runtime linker does not
        pick up libraries out of /usr/lib.  This can be checked by
        running

        cups-config --libs --ldflags

        and inspecting the output for any mention of "rpath", "RPATH",
        "RUN_PATH", or the like.  This is controlled by the CUPS
        installation on your system.

     ii) There is presently a version of Gutenprint installed in /usr
        (--prefix=/usr) rather than /usr/local or the like.  The
        default location of Gutenprint installation is in /usr/local,
        but system vendors typically install Gutenprint in /usr.

     iii) Gutenprint is built dynamically only (--disable-static or
        --disable-static-genppd).  This is not a default, and requires
        the explicit --disable-static or --disable-static-genppd on
	the Gutenprint "configure" command line.  Therefore, if you
	build Gutenprint normally you should not be vulnerable to this
	problem.

     Note that in general if you install CUPS into a non-standard
     location, and install Gutenprint into the same location, this
     problem can surface.  For example, if you choose to install CUPS
     in /usr/local and Gutenprint in /usr/local you are vulnerable to
     this.  However, it is not standard practice to install CUPS
     anywhere but /usr.

     In this case, the run path embedded in the genppd executable
     points to the version of Gutenprint installed in /usr/lib.  This
     run path overrides any attempt by libtool to look in the build
     directory.  The result is that cups-genppd and rastertogutenprint
     are run against the older version of Gutenprint.  If the new
     version contains additional features (more printers, changes to
     printer options, etc.) they will not be available.

     This bug is difficult to detect in a normal build.  It normally
     does not cause an error to happen during build unless there is an
     API change from the version installed and the version being
     built; the only failure is frequently that some PPD files may not
     be built or may be built with missing options.  Due to the PPD
     version checking introduced in this release, the behavior might
     manifest itself as a runtime error.  It is also possible that
     there will be no error at all other than the older version of
     Gutenprint being used, with the result that new features and bug
     fixes are not available.

     If you wish to use only shared libraries, do not wish to build
     static libraries at all, and are vulnerable to this issue
     (because cups-config --ldflags sets the run path), there are
     three workarounds available:

     i) Build and install Gutenprint into /usr (rather than
        /usr/local) and then rebuild Gutenprint from scratch.  This
        will install the correct libgutenprint.so in /usr/lib, and in
        the rebuild genppd will be run against the correct library.

     ii) Remove the old version of Gutenprint prior to building the
        new version of Gutenprint.  The important files to remove are
        anything named /usr/lib/libgutenprint*.

     iii) Edit cups-config to remove the reference to the run path.

  2) There is a known translation problem building the PPD files used
     by the CUPS driver such that on many systems all of the PPD
     files are in the English language.  This causes CUPS tools, such
     as KUPS or http://localhost:631 to display many copies of each
     PPD file, all in the English (en) language.  In fact, the PPD
     files should be translated into many different languages.

     The PPD files are created by a program named "genppd" in the
     src/cups directory.  This program is called once for each
     language, and creates all of the PPD files for the language in
     one shot.

     The command 'zgrep' can be used to determine if genppd is
     creating the PPD files correctly, as follows:

	 src/cups$ zgrep LanguageVersion ppd/*/pcl-4.ppd.gz
	 ppd/C/pcl-4.ppd.gz:*LanguageVersion: English
	 ppd/da/pcl-4.ppd.gz:*LanguageVersion: Danish
	 ppd/en_GB/pcl-4.ppd.gz:*LanguageVersion: English-GB
	 ...

     If the PPD file for each language has a different language
     version, the genppd program operated correctly.  If instead the
     output looks like this:

	 src/cups$ zgrep LanguageVersion ppd/*/stp-pcl-4.5.1.ppd.gz
	 ppd/C/stp-pcl-4.5.1.ppd.gz:*LanguageVersion: English
	 ppd/da/stp-pcl-4.5.1.ppd.gz:*LanguageVersion: English
	 ppd/en_GB/stp-pcl-4.5.1.ppd.gz:*LanguageVersion: English
	 ...

     the program did not operate correctly.

     If you do not have 'zgrep' on your system, you can gunzip the
     PPD files, and use

	 grep LanguageVersion ppd/*/stp-pcl-4.5.1.ppd

     to accomplish the same test.

     The normal mechanism for performing translations is to set the
     LANG environment variable to the appropriate language prior to
     running the program.  This normally causes the program to search
     the translations (normally in /usr/share/locale or
     /usr/lib/locale) for the chosen language.  When a specially
     marked string is used, a special macro calls `gettext()' on the
     string to retrieve the translation, and substitutes the
     translation for the string in question.

     There are two problems with this approach in the context of
     genppd.  The translation engine is intended to be used after
     installation, not during build, and this causes problems.

     i) At the time genppd is run, the translations have not been
	installed in the normal system directories.  Fortunately,
	it's possible to tell the translation machinery (via
	bindtextdomain) to look elsewhere for the translation
	catalogs.  What we do is install the catalogs in a temporary
	directory under src/cups, and tell genppd to instruct the
	translation machinery to look there.  This workaround is
	straightforward, and doesn't normally cause problems.

     ii) LANG only lets us pick a valid locale (normally determined by
	listing the directories in /usr/share/locale or
	/usr/lib/locale).  Unfortunately, while language codes (which
	form the base of locales) are standard, the actual locale
	names aren't always.  On some systems, the locale names are
	just the language base names; on others, they are the
	language names concatenated with country codes (e. g. en_US),
	while on others they are language codes concatenated with
	character sets.  We are not aware of any workaround for this,
	possibly short of actually running make install and then
	rebuilding the PPD's.  'make install' will install the
	message catalogs, and that may create the necessary locale
	directories.  This is not exactly a very elegant approach.

     The GNU gettext library (libintl.a) provides another environment
     variable, LANGUAGE, which unconditionally looks up translations
     according to the language, ignoring LANG and the LC_*
     environment variables that are normally used for translation.
     This library is no longer included with Gutenprint
     (--with-included-gettext will not work).  Install the GNU
     gettext package first if you need libintl.a.  Many systems
     provide translation machinery in their standard libraries, and
     it may not always be best to use foreign libraries to replace
     standard system functionality.

     We have chosen to use LANGUAGE for this purpose, as the GNU
     gettext library appears to offer the most reliable translation,
     and LANGUAGE appears to offer the most reliable mechanism.  We
     have actually found that LANG and LC_* can interfere with
     LANGUAGE, thus we do not use both.

     To determine if the translations are working, you must actually
     inspect the PPD files.  You will need to

     cd src/cups/ppd/sv
     gunzip *
     more *

     or the like to determine if this is successful.  In particular,
     look for LanguageVersion, and make sure that it is correct (it
     should be "Swedish" in the sv directory, for example), and also
     make sure that the paper sizes are also translated.  We
     currently suggest using the Swedish translation for this purpose
     as it is the most complete.

     If packagers find that the PPD files are all in English, rather
     than translated into the appropriate languages, we suggest the
     following:

     i) Install GNU gettext (libintl).  If your system is not based
	on GNU libc (Linux usually is based on GNU libc; BSD,
	Solaris, IRIX, etc. are not), you will need this to have any
	possibility of creating the translated PPD files.

     ii) Run 'make install' to install the package (including the
	message catalogs) onto the system first, and then do the
	following:

	cd src/cups
	rm ppd-stamp
	make

	to rebuild the PPD files.  Having the message catalogs on the
	system may permit this to succeed.

     iii) Ensure that your system actually has locales named 'sv',
	'pl', and all of the other supported languages, and change
	LANGUAGE to something more appropriate (most likely LANG,
	LC_MESSAGES, or LC_ALL).

     iv) Build the PPD files on a Linux-based system; they are
	portable.

     v) Use --disable-translated-cups-ppds on the configure command line
	to suppress the translated PPD files altogether.

     Please feel free to contact us about this issue.

  3) There are multiple issues that one must be aware of when using
     Foomatic with Gutenprint.

     i) Before installing any new release of Gutenprint 5.1, you must
	manually remove any existing Foomatic option files.  This is
	because the Foomatic utility to load data kits
	(foomatic-kitload) does not remove obsolete data files from
	the Foomatic database.  If you do not do this, any PPD files
	you generate will be incorrect and printing may work
	incorrectly or not at all.

	Foomatic option files are usually located in

	/usr/local/share/foomatic/db/source/opt

	or

	/usr/share/foomatic/db/source/opt

	Assuming they're in the former location, you must remove data
	files associated with the Gutenprint driver.  The command to do
	this, which must be run as the superuser (root) is

	cd /usr/local/share/foomatic/db/source/opt
	ls -l gutenprint-ijs*.xml

	If there are existing files present, you must remove them:

	rm -f gutenprint-ijs*.xml

	Now check to make sure that they are gone:

	ls -l gutenprint-ijs*.xml

	CAUTION: Be very careful when typing this command!  Minor
	errors in typing these commands may result in severe damage to
	your system.

	After this, you may run 'make install' in your Gutenprint
	source directory to install the package.  You will then need to
	re-create any printer queues using Foomatic.

	In general, you will have to perform this procedure any time
	you install a new version of Gutenprint.

	Please check the Foomatic site
	(http://www.openprinting.org/foomatic.html) and the Gutenprint
	site (http://gimp-print.sourceforge.net) for updated
	instructions about this.

     ii) Unlike with the CUPS native driver, there is no simple way to
	update all PPD files when you install a new version of
	Gutenprint.  You must either use the foomatic-ppdfile command
	to upgrade PPD files individually, or foomatic-compiledb to
	build all PPD files.  Your system may provide an alternate way
	to install new PPD files, in which case you may use that
	method.

     iii) The Foomatic data is version locked to the Gutenprint release
	installed on the system.  For example, PPD files generated
	with the Foomatic data for release 5.1.0 will not work with
	the ijsgutenprint in release 5.1.1.  This is to prevent
	accidentally using incorrect data, which could cause incorrect
	function to take place.

  4) There is a known complication building "escputil" that causes
     problems on some systems.  "escputil" uses the "readline"
     package, to support command editing and history within the
     program.  Unfortunately, linking programs with "readline" often
     requires linking against additional libraries, and the exact
     library depends upon the system (e. g. not all Linux systems have
     the same requirements).

     The configure script attempts to determine which additional
     library must be linked against.  It tries using the following
     libraries in this order to build a test executable:

     -lncurses
     -lcurses
     -ltermcap
     no additional libraries

     The reason it tries other libraries first is that some systems
     will link successfully, but only fail when an attempt is made to
     actually call readline.  Therefore, we assume that additional
     libraries are required.  Since we try the extra libraries in
     order from most recent to oldest, we expect that the first one we
     find will be appropriate.  For example, if the "ncurses" library
     is the standard on a given system, the "termcap" library may be
     provided for back compatibility, but it is unlikely that
     "termcap" will be the standard with "curses" or "ncurses" being
     provided for compatibility only (so that the link will succeed
     but the command will use the incorrect library).

     As this procedure is not failsafe, we provide the following
     configure options to control this behavior:

     ./configure --with-readline=yes  (the default; attempts to
				      determine the correct library
				      to link against)

     ./configure --with-readline=no   (turns off use of readline
				      altogether)

     ./configure --with-readline=only (specifically instructs
				      configure to not attempt to
				      link against any other
				      libraries)

     ./configure --with-readline=libs (specifies the libraries to be
				      linked against)

     A hypothetical (this won't work anywhere!) example of the latter
     would be

     ./configure --with-readline='-lncurses -ltermcap'

     Note that configure will not allow readline to be used if it
     cannot successfully build the test program, regardless of the
     option selected.  If you are having difficulty getting escputil
     to build, we suggest using --with-readline=no.  The commands
     used within escputil are very short and seldom require
     significant editing.
