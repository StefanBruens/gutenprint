#!/usr/bin/perl

require("getopts.pl");

do Getopts('v');

use vars qw($end
	    $stuff
	    $opt_v
	    $verbose
	    $curpos
	    $esc
	    %seqtable);

use strict;

while (<>) {
    $stuff .= $_;
}

$end = length $stuff;

%seqtable = ( "@", 0,
	      "(R", "REMOTE",
	      "(", "VARIABLE",
	      "U", 1,
	      "\\", 2,
	      "\$", 2,
	      "r", 1,
	      ".", "SPECIAL",
	      "i", "SPECIAL1",
	      "\000", 2,
	      "\001", 22
	  );

$esc = "\033";

$curpos = 0;
$verbose = $opt_v;

sub do_remote_command {
    print "\n";
    printf "%08x  ", $curpos;
    print "1b  (  R ";
    $curpos += 3;
    my $lchar = substr($stuff, $curpos, 1);
    my $nlchar = unpack("C", $lchar);
    my $hchar = substr($stuff, $curpos + 1, 1);
    my $nhchar = unpack("C", $hchar);
    printf "%02x %02x ", $nlchar, $nhchar;
    my $skipchars = ($nhchar * 256) + $nlchar;
    $curpos += 2;
    my $i;
    my $char;
    my $nchar;
    for ($i = 0; $i < $skipchars; $i++) {
	$char = substr($stuff, $curpos + $i, 1);
	$nchar = unpack("C", $char);
	if ($nchar >= 32 && $nchar < 127) {
	    print $char;
	} else {
	    printf "%02x ", $nchar;
	}
    }
    $curpos += $skipchars;
    while (substr($stuff, $curpos, 2) =~ /[A-Z0-9][A-Z0-9]/) {
	print "\n";
	printf "%08x    ", $curpos;
	my ($cmd) = substr($stuff, $curpos, 2);
	print $cmd;
	$curpos += 2;
	$lchar = substr($stuff, $curpos, 1);
	$nlchar = unpack("C", $lchar);
	$hchar = substr($stuff, $curpos + 1, 1);
	$nhchar = unpack("C", $hchar);
	if ($cmd eq "DF") {
	    $skipchars = 0;
	} else {
	    $skipchars = ($nhchar * 256) + $nlchar;
	}
	printf "%02x %02x ", $nlchar, $nhchar;
	$curpos += 2;
	for ($i = 0; $i < $skipchars; $i++) {
	    printf "%02x ", unpack("C", substr($stuff, $curpos + $i, 1));
	}
	$curpos += $skipchars;
    }
}

sub print_prefix_bytes {
    my ($bytes_to_print) = @_;
    print "\n";
    printf "%08x  ", $curpos;
    print "1b ";
    my $i;
    my $char;
    my $nchar;
    for ($i = 1; $i < $bytes_to_print; $i++) {
	$char = substr($stuff, $curpos + $i, 1);
	$nchar = unpack("C", $char);
	if ($i < 2 && $nchar >= 32 && $nchar < 127) {
	    print " $char ";
	} else {
	    printf "%02x ", unpack("C", $char);
	}
    }
}

sub print_output_data {
    my ($comptype, $bitsperpixel, $dots, $rows) = @_;
    my $counter;
    my $fchar;
    print " ($dots, $rows, $bitsperpixel) ";
    $dots *= 8;
    my $savedots = $dots;
    $dots *= $rows;
    if ($comptype == 0) {
	my $bytes = ($dots + 7) / 8;
	if ($verbose) {
	    printf "%*v02x ", " ", substr($stuff, $curpos, $bytes);
	}
	$curpos += $bytes;
    } elsif ($comptype == 1) {
	while ($rows-- > 0) {
	    $dots = $savedots;
	    while ($dots > 0) {
		$counter = ord(substr($stuff, $curpos, 1));
		$curpos++;
		if ($counter <= 127) {
		    $counter++;
		    if ($verbose) {
			printf "%*v02x ", " ", substr($stuff, $curpos, $counter);
		    }
		    $curpos += $counter;
		} else {
		    $counter = 257 - $counter;
		    if ($verbose) {
			$fchar = sprintf "%v02x ", substr($stuff, $curpos, 1);
			map { print $fchar } (0..$counter - 1);
		    }
		    $curpos++;
		}
		$dots -= 8 * $counter;
	    }
	    if ($rows > 0 && $verbose) {
		print "\n        ";
	    }
	}
    } else {
	print "\nUnknown compression type $comptype!\n";
    }
}

sub do_special_command {
    my $comptype = unpack("C", substr($stuff, $curpos + 2, 1));
    my $dots = unpack("v", substr($stuff, $curpos + 6, 2));
    my $rows = unpack("C", substr($stuff, $curpos + 5, 1));
    print_prefix_bytes(8);
    $curpos += 8;
    print_output_data($comptype, 1, $dots, $rows);
}

sub do_special1_command {
    my $comptype = unpack("C", substr($stuff, $curpos + 3, 1));
    my $bitsperpixel = unpack("C", substr($stuff, $curpos + 4, 1));
    my $dots = unpack("v", substr($stuff, $curpos + 5, 2));
    my $rows = unpack("v", substr($stuff, $curpos + 7, 2));
    print_prefix_bytes(9);
    $curpos += 9;
    print_output_data($comptype, $bitsperpixel, $dots, $rows);
}

while ($curpos < $end) {
    my $found;
    my $key;
    my $skipchars;
    my $startoff;
    my $kchar;
    my $nkchar;
    my $lchar;
    my $nlchar;
    my $hchar;
    my $nhchar;
    my $i;
    my $char;
    my $nchar;
    my $bytes;
    if (substr($stuff, $curpos, 1) eq "$esc") {
	$found = 0;
	foreach $key (sort { length $b <=> length $a } keys %seqtable) {
	    if (substr($stuff, $curpos + 1, length $key) eq $key) {
		$skipchars = $seqtable{$key};
		if ($skipchars eq "SPECIAL") {
		    do_special_command;
		    $found = 2;
		} elsif ($skipchars eq "SPECIAL1") {
		    do_special1_command;
		    $found = 2;
		} elsif ($skipchars eq "REMOTE") {
		    do_remote_command;
		    $found = 2;
		} else {
		    print "\n";
		    printf "%08x  ", $curpos;
		    print "1b ";
		    $startoff = 0;
		    if ($skipchars eq "VARIABLE") {
			$kchar = substr($stuff, $curpos + (length $key) + 1, 1);
			$nkchar = unpack("C", $kchar);
			$lchar = substr($stuff, $curpos + (length $key) + 2, 1);
			$nlchar = unpack("C", $lchar);
			$hchar = substr($stuff, $curpos + (length $key) + 3, 1);
			$nhchar = unpack("C", $hchar);
			$skipchars = ($nhchar * 256) + $nlchar;
			$startoff = 3;
		    }
		    for ($i = 0;
			 $i < $skipchars + (length $key) + $startoff;
			 $i++) {
			$char = substr($stuff, $curpos + $i + 1, 1);
			$nchar = unpack("C", $char);
			if ($i < 3 && $nchar >= 32 && $nchar < 127) {
			    print " $char ";
			} else {
			    printf "%02x ", unpack("C", $char);
			}
		    }
		    $found = 1;
		}
		$bytes = length($key) + 1 + $skipchars + $startoff;
		last;
	    }
	}
	if (! $found) {
	    print "\n";
	    printf "%08x  ", $curpos;
	    print "1b ";
	    $curpos += 1;
	} elsif ($found == 1) {
	    $curpos += $bytes;
	} else {
	}
    } else {
	$char = substr($stuff, $curpos + 0, 1);
	$nchar = unpack("C", $char);
	if ($nchar >= 32 && $nchar < 127) {
	    print " *$char ";
	} else {
	    printf "*%02x ", unpack("C", $char);
	}
	$curpos++;
    }
}
